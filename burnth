#!/usr/bin/python3
import argparse

from zk.networks import NETWORKS, DEFAULT_NETWORK
from commands import (
    info_cmd,
    InfoContext,
    burn_cmd,
    BurnContext,
    mint_cmd,
    MintContext,
    spend_cmd,
    SpendContext,
)


NETWORK = NETWORKS[DEFAULT_NETWORK]
SYMBOL = "BURNTH"


parser = argparse.ArgumentParser(
    prog="burnth",
    description="Mint and spend Burnth tokens!",
    epilog="By Nobitex Labs - https://labs.nobitex.ir",
)

subparsers = parser.add_subparsers(help="Burnth", dest="command", required=True)

parser_info = subparsers.add_parser(
    "info", help="Information about your wallet!", allow_abbrev=False
)
parser_info.add_argument(
    "--priv-src", type=str, help="Private key to get balance.", required=False
)

parser_burn = subparsers.add_parser("burn", help="Burn ETH!", allow_abbrev=False)
parser_burn.add_argument(
    "--priv-src", type=str, help="Private key of the source account.", required=True
)
parser_burn.add_argument(
    "--amount", type=float, help="Amount to be burnt.", required=True
)

parser_mint = subparsers.add_parser("mint", help=f"Mint {SYMBOL}!", allow_abbrev=False)
parser_mint.add_argument(
    "--priv-fee-payer",
    type=str,
    help="Private key of the account initiating mint transaction.",
    required=True,
)
parser_mint.add_argument(
    "--src-burn-addr",
    type=str,
    help="Address of the source account containing burnth ETH.",
    required=True,
)
parser_mint.add_argument(
    "--dst-addr",
    type=str,
    help="Address of the account receiving the {SYMBOL} tokens.",
    required=True,
)
parser_mint.add_argument(
    "--encrypted",
    action="store_true",
    help="Whether the balance is encrypted or not.",
    required=False,
)

parser_spend = subparsers.add_parser(
    "spend", help=f"spend {SYMBOL}!", allow_abbrev=False
)
parser_spend.add_argument(
    "--priv-sender",
    type=str,
    help="Private key of the account initiating spend transaction.",
    required=True,
)
parser_spend.add_argument(
    "--dst-addr",
    type=str,
    help=f"Address of the account receiving the {SYMBOL} tokens.",
    required=True,
)
parser_spend.add_argument(
    "--coin-index", type=int, help=f"Amount index.", required=True
)
parser_spend.add_argument(
    "--amount", type=float, help=f"Amount to be spent.", required=True
)


if __name__ == "__main__":
    args = parser.parse_args()

    if args.command == "info":
        context = InfoContext(args.priv_src)
        info_cmd(NETWORK, context)

    elif args.command == "burn":
        context = BurnContext(args.amount, args.priv_src)
        burn_cmd(NETWORK, context)

    elif args.command == "mint":
        context = MintContext(
            args.src_burn_addr, args.dst_addr, args.encrypted, args.priv_fee_payer
        )
        mint_cmd(NETWORK, context)

    elif args.command == "spend":
        context = SpendContext(
            args.coin_index, args.amount, args.dst_addr, args.priv_sender
        )
        spend_cmd(NETWORK, context)
